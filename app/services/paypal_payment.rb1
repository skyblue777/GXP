class PaypalPayment
  require 'paypal-sdk-rest'
  include PayPal::SDK::REST
  include PayPal::SDK::Core::Logging  

  def initialize(params = {})
    @nonce = params[:params]
    @order = params[:order]
  end

  def pay_with_card
    @payment = Payment.new({
      :intent => "sale",

      # ###Payer
      # A resource representing a Payer that funds a payment
      # Use the List of `FundingInstrument` and the Payment Method
      # as 'credit_card'
      :payer => {
        :payment_method => "credit_card",

        # ###FundingInstrument
        # A resource representing a Payeer's funding instrument.
        # Use a Payer ID (A unique identifier of the payer generated
        # and provided by the facilitator. This is required when
        # creating or using a tokenized funding instrument)
        # and the `CreditCardDetails`
        :funding_instruments => [{

          # ###CreditCard
          # A resource representing a credit card that can be
          # used to fund a payment.
          :credit_card => {
            :type => "#{@nonce[:card_type]}",
            :number => "#{@nonce[:card_no]}",
            :expire_month => "#{@nonce[:card_expiration_date].first(2)}",
            :expire_year => "#{Time.zone.now.to_date.year.to_s.first(2)+@nonce[:card_expiration_date].last(2)}",
            :cvv2 => "#{@nonce[:card_cvv]}",
            :first_name => "*",
            :last_name => "*",

            # ###Address
            # Base Address used as shipping or billing
            # address in a payment. [Optional]
            :billing_address => {
              :line1 => "*",
              :city => "*",
              :state => "*",
              :postal_code => "00",
              :country_code => "US" }}}]},
      # ###Transaction
      # A transaction defines the contract of a
      # payment - what is the payment for and who
      # is fulfilling it.
      :transactions => [{

        # Item List
        :item_list => {
          :items => [{
            :name => "item",
            :sku => "item",
            :price => "#{@nonce[:amount].to_f.round(2)}",
            :currency => "USD",
            :quantity => 1 }]},

        # ###Amount
        # Let's you specify a payment amount.
        :amount => {
          :total => "#{@nonce[:amount].to_f.round(2)}",
          :currency => "USD" },
        :description => "This is the payment transaction description." }]})

  end
  def pay_with_paypal(amount, cancel_url, return_url)
    # ###Payment
    # A Payment Resource; create one using
    # the above types and intent as 'sale'
    payment = Payment.new({
      :intent =>  "sale",

      # ###Payer
      # A resource representing a Payer that funds a payment
      # Payment Method as 'paypal'
      :payer =>  {
        :payment_method =>  "paypal" },

      # ###Redirect URLs
      :redirect_urls => {
        :return_url => "#{return_url}",
        :cancel_url => "#{cancel_url}" },

      # ###Transaction
      # A transaction defines the contract of a
      # payment - what is the payment for and who
      # is fulfilling it.
      :transactions =>  [{

        # Item List
        :item_list => {
          :items => [{
            :name => "item",
            :sku => "item",
            :price => "#{amount.to_f.round(2)}",
            :currency => "USD",
            :quantity => 1 }]},

        # ###Amount
        # Let's you specify a payment amount.
        :amount =>  {
          :total =>  "#{amount.to_f.round(2)}",
          :currency =>  "USD" },
        :description =>  "This is the payment transaction description." }]})
  end
end
